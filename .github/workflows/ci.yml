name: CI
on: [push, pull_request]
env:
  UI_VERSION: ${{ github.sha }}
jobs:
  build:
    name: Build & test
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base:v3.0.0
    steps:
      - uses: actions/checkout@v3

      # Install Node 16
      - uses: actions/setup-node@v3
        with:
          node-version: 16.16.0
          cache: 'npm'

      - run: npm install -g npm@8.5.5

      # Install & build & test:
      - run: npm ci

      - run: npm run test:unit

      # Build & run normal integration tests:
      - name: Build & test
        run: npm run test:integration
        if: github.ref != 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # To pull server without rate limit issues in CI

      # Build with secrets & run integrations tests, on main only:
      - name: Build & test for production release
        run: npm run test:integration
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_ORG: http-toolkit
          SENTRY_PROJECT: httptoolkit-ui
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # To pull server without rate limit issues in CI

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*
          if-no-files-found: error

  check-secrets:
    name: Checking available secrets
    runs-on: ubuntu-latest
    outputs:
      netlify: ${{ steps.all.outputs.netlify }}
      docker: ${{ steps.all.outputs.docker }}
      scaleway: ${{ steps.all.outputs.scaleway }}
      bunny: ${{ steps.all.outputs.bunny }}

    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      SCW_API_CONTAINER_ID: ${{ vars.SCW_API_CONTAINER_ID }}
      SCW_SECRET_KEY: ${{ secrets.SCW_SECRET_KEY }}

      BUNNY_SITE_API_KEY: ${{ secrets.BUNNY_SITE_API_KEY }}

    steps:
      - name: "Checking..."
        id: all
        shell: bash
        run: |
          check () {
            result=1; for var in $*; do if [ -z "${!var}" ]; then result=0; fi; done;
          }
          
          check "NETLIFY_AUTH_TOKEN" "NETLIFY_SITE_ID"
          echo "netlify=$result" >> "$GITHUB_OUTPUT"

          check "DOCKERHUB_USERNAME" "DOCKERHUB_TOKEN"
          echo "docker=$result" >> "$GITHUB_OUTPUT"

          check "SCW_API_CONTAINER_ID" "SCW_SECRET_KEY"
          echo "scaleway=$result" >> "$GITHUB_OUTPUT"

          check "BUNNY_SITE_API_KEY"
          echo "bunny=$result" >> "$GITHUB_OUTPUT"
          
  publish-netlify:
    name: Deploy ${{ (github.ref == 'refs/heads/main' && 'to Netlify production') || 'Netlify preview' }}
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    needs: [build, check-secrets]
    if: github.event_name == 'push' && ${{needs.check-secrets.outputs.netlify == 1}}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.1
        with:
          publish-dir: './dist'
          production-branch: main # Main goes to prod, others do deploy previews
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: GHA Deploy - ${{ github.event.head_commit.message }}
          enable-commit-status: true
          enable-pull-request-comment: false
          enable-commit-comment: false
          netlify-config-path: ./netlify.toml
          alias: ${{ github.sha }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 1

  publish-docker:
    name: Build & publish container to Docker Hub
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    needs: [build, check-secrets]
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/heads/dependabot/') && ${{needs.check-secrets.outputs.docker == 1}}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: httptoolkit/ui
          tags: |
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha

      - name: Build and publish to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish-scaleway:
    name: Deploy to Scaleway
    runs-on: ubuntu-latest
    container: httptoolkit/act-build-base
    needs: [publish-docker, check-secrets]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && ${{needs.check-secrets.outputs.scaleway == 1}}
    steps:
      - name: Redeploy container
        uses: thibaultchazal/scaleway-serverless-container-deploy-action@0d290edda0c3359e51442bd8bf730eafef4e290f
        with:
          container_id: ${{ vars.SCW_API_CONTAINER_ID }}
          secret_key: ${{ secrets.SCW_SECRET_KEY }}
          registry_image_url: "registry.hub.docker.com/httptoolkit/ui:prod"

      - name: Flush CDN cache
        if: ${{needs.check-secrets.outputs.bunny == 1}}
        run: |
          # Clear CDN cache to re-request content:
          curl -f --request POST \
            --url https://api.bunny.net/pullzone/$PULL_ZONE_ID/purgeCache \
            --header "AccessKey: $BUNNY_SITE_API_KEY"
        env:
          PULL_ZONE_ID: 1110200
          BUNNY_SITE_API_KEY: ${{ secrets.BUNNY_SITE_API_KEY }}
